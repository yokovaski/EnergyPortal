// <auto-generated />
using System;
using DatabaseInterface;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseInterface.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221123202642_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatabaseInterface.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DatabaseInterface.Entities.HourMetric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("Mode")
                        .HasColumnType("integer")
                        .HasColumnName("mode");

                    b.Property<long>("RaspberryPiId")
                        .HasColumnType("bigint")
                        .HasColumnName("raspberry_pi_id");

                    b.Property<int>("RedeliveryNow")
                        .HasColumnType("integer")
                        .HasColumnName("redelivery_now");

                    b.Property<long>("RedeliveryTotalHigh")
                        .HasColumnType("bigint")
                        .HasColumnName("redelivery_total_high");

                    b.Property<long>("RedeliveryTotalLow")
                        .HasColumnType("bigint")
                        .HasColumnName("redelivery_total_low");

                    b.Property<int>("SolarNow")
                        .HasColumnType("integer")
                        .HasColumnName("solar_now");

                    b.Property<long>("SolarTotal")
                        .HasColumnType("bigint")
                        .HasColumnName("solar_total");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("UsageGasNow")
                        .HasColumnType("integer")
                        .HasColumnName("usage_gas_now");

                    b.Property<long>("UsageGasTotal")
                        .HasColumnType("bigint")
                        .HasColumnName("usage_gas_total");

                    b.Property<int>("UsageNow")
                        .HasColumnType("integer")
                        .HasColumnName("usage_now");

                    b.Property<long>("UsageTotalHigh")
                        .HasColumnType("bigint")
                        .HasColumnName("usage_total_high");

                    b.Property<long>("UsageTotalLow")
                        .HasColumnType("bigint")
                        .HasColumnName("usage_total_low");

                    b.HasKey("Id")
                        .HasName("pk_hour_metrics");

                    b.HasIndex("Created")
                        .HasDatabaseName("ix_hour_metrics_created");

                    b.HasIndex("RaspberryPiId")
                        .HasDatabaseName("ix_hour_metrics_raspberry_pi_id");

                    b.ToTable("hour_metrics", (string)null);
                });

            modelBuilder.Entity("DatabaseInterface.Entities.MinuteMetric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("Mode")
                        .HasColumnType("integer")
                        .HasColumnName("mode");

                    b.Property<long>("RaspberryPiId")
                        .HasColumnType("bigint")
                        .HasColumnName("raspberry_pi_id");

                    b.Property<int>("RedeliveryNow")
                        .HasColumnType("integer")
                        .HasColumnName("redelivery_now");

                    b.Property<long>("RedeliveryTotalHigh")
                        .HasColumnType("bigint")
                        .HasColumnName("redelivery_total_high");

                    b.Property<long>("RedeliveryTotalLow")
                        .HasColumnType("bigint")
                        .HasColumnName("redelivery_total_low");

                    b.Property<int>("SolarNow")
                        .HasColumnType("integer")
                        .HasColumnName("solar_now");

                    b.Property<long>("SolarTotal")
                        .HasColumnType("bigint")
                        .HasColumnName("solar_total");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("UsageGasNow")
                        .HasColumnType("integer")
                        .HasColumnName("usage_gas_now");

                    b.Property<long>("UsageGasTotal")
                        .HasColumnType("bigint")
                        .HasColumnName("usage_gas_total");

                    b.Property<int>("UsageNow")
                        .HasColumnType("integer")
                        .HasColumnName("usage_now");

                    b.Property<long>("UsageTotalHigh")
                        .HasColumnType("bigint")
                        .HasColumnName("usage_total_high");

                    b.Property<long>("UsageTotalLow")
                        .HasColumnType("bigint")
                        .HasColumnName("usage_total_low");

                    b.HasKey("Id")
                        .HasName("pk_minute_metrics");

                    b.HasIndex("Created")
                        .HasDatabaseName("ix_minute_metrics_created");

                    b.HasIndex("RaspberryPiId")
                        .HasDatabaseName("ix_minute_metrics_raspberry_pi_id");

                    b.ToTable("minute_metrics", (string)null);
                });

            modelBuilder.Entity("DatabaseInterface.Entities.RaspberryPi", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("RpiKey")
                        .HasColumnType("text")
                        .HasColumnName("rpi_key");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_raspberry_pis");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_raspberry_pis_user_id");

                    b.ToTable("raspberry_pis", (string)null);
                });

            modelBuilder.Entity("DatabaseInterface.Entities.Settings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("ElectricityDeliveryPricePerMonth")
                        .HasColumnType("numeric")
                        .HasColumnName("electricity_delivery_price_per_month");

                    b.Property<decimal>("GasDeliveryPricePerMonth")
                        .HasColumnType("numeric")
                        .HasColumnName("gas_delivery_price_per_month");

                    b.Property<decimal>("GasPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("gas_price");

                    b.Property<decimal>("HighRedeliveryPricePerKwh")
                        .HasColumnType("numeric")
                        .HasColumnName("high_redelivery_price_per_kwh");

                    b.Property<decimal>("HighUsagePricePerKwh")
                        .HasColumnType("numeric")
                        .HasColumnName("high_usage_price_per_kwh");

                    b.Property<decimal>("LowRedeliveryPricePerKwh")
                        .HasColumnType("numeric")
                        .HasColumnName("low_redelivery_price_per_kwh");

                    b.Property<decimal>("LowUsagePricePerKwh")
                        .HasColumnType("numeric")
                        .HasColumnName("low_usage_price_per_kwh");

                    b.Property<bool>("ShowDayName")
                        .HasColumnType("boolean")
                        .HasColumnName("show_day_name");

                    b.Property<bool>("SolarSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("solar_system");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("text")
                        .HasColumnName("time_zone_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_settings");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_settings_user_id");

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("DatabaseInterface.Entities.TenSecondMetric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("Mode")
                        .HasColumnType("integer")
                        .HasColumnName("mode");

                    b.Property<long>("RaspberryPiId")
                        .HasColumnType("bigint")
                        .HasColumnName("raspberry_pi_id");

                    b.Property<int>("RedeliveryNow")
                        .HasColumnType("integer")
                        .HasColumnName("redelivery_now");

                    b.Property<long>("RedeliveryTotalHigh")
                        .HasColumnType("bigint")
                        .HasColumnName("redelivery_total_high");

                    b.Property<long>("RedeliveryTotalLow")
                        .HasColumnType("bigint")
                        .HasColumnName("redelivery_total_low");

                    b.Property<int>("SolarNow")
                        .HasColumnType("integer")
                        .HasColumnName("solar_now");

                    b.Property<long>("SolarTotal")
                        .HasColumnType("bigint")
                        .HasColumnName("solar_total");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("UsageGasNow")
                        .HasColumnType("integer")
                        .HasColumnName("usage_gas_now");

                    b.Property<long>("UsageGasTotal")
                        .HasColumnType("bigint")
                        .HasColumnName("usage_gas_total");

                    b.Property<int>("UsageNow")
                        .HasColumnType("integer")
                        .HasColumnName("usage_now");

                    b.Property<long>("UsageTotalHigh")
                        .HasColumnType("bigint")
                        .HasColumnName("usage_total_high");

                    b.Property<long>("UsageTotalLow")
                        .HasColumnType("bigint")
                        .HasColumnName("usage_total_low");

                    b.HasKey("Id")
                        .HasName("pk_ten_second_metrics");

                    b.HasIndex("Created")
                        .HasDatabaseName("ix_ten_second_metrics_created");

                    b.HasIndex("RaspberryPiId")
                        .HasDatabaseName("ix_ten_second_metrics_raspberry_pi_id");

                    b.ToTable("ten_second_metrics", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DatabaseInterface.Entities.HourMetric", b =>
                {
                    b.HasOne("DatabaseInterface.Entities.RaspberryPi", "RaspberryPi")
                        .WithMany("HourMetrics")
                        .HasForeignKey("RaspberryPiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hour_metrics_raspberry_pis_raspberry_pi_id");

                    b.Navigation("RaspberryPi");
                });

            modelBuilder.Entity("DatabaseInterface.Entities.MinuteMetric", b =>
                {
                    b.HasOne("DatabaseInterface.Entities.RaspberryPi", "RaspberryPi")
                        .WithMany("MinuteMetrics")
                        .HasForeignKey("RaspberryPiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_minute_metrics_raspberry_pis_raspberry_pi_id");

                    b.Navigation("RaspberryPi");
                });

            modelBuilder.Entity("DatabaseInterface.Entities.RaspberryPi", b =>
                {
                    b.HasOne("DatabaseInterface.Entities.ApplicationUser", "User")
                        .WithOne("RaspberryPi")
                        .HasForeignKey("DatabaseInterface.Entities.RaspberryPi", "UserId")
                        .HasConstraintName("fk_raspberry_pis_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseInterface.Entities.Settings", b =>
                {
                    b.HasOne("DatabaseInterface.Entities.ApplicationUser", "User")
                        .WithOne("Settings")
                        .HasForeignKey("DatabaseInterface.Entities.Settings", "UserId")
                        .HasConstraintName("fk_settings_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseInterface.Entities.TenSecondMetric", b =>
                {
                    b.HasOne("DatabaseInterface.Entities.RaspberryPi", "RaspberryPi")
                        .WithMany("TenSecondMetrics")
                        .HasForeignKey("RaspberryPiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ten_second_metrics_raspberry_pis_raspberry_pi_id");

                    b.Navigation("RaspberryPi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DatabaseInterface.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DatabaseInterface.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("DatabaseInterface.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DatabaseInterface.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("DatabaseInterface.Entities.ApplicationUser", b =>
                {
                    b.Navigation("RaspberryPi");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("DatabaseInterface.Entities.RaspberryPi", b =>
                {
                    b.Navigation("HourMetrics");

                    b.Navigation("MinuteMetrics");

                    b.Navigation("TenSecondMetrics");
                });
#pragma warning restore 612, 618
        }
    }
}
